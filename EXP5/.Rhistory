setwd("C:\\Users\\Neerja\\OneDrive\\Desktop\\practicals\\SPIT\\YEAR4\\SEM7\\ADV\\EXP5")
my_data <- read.csv("utrechthousinglarge.csv")
View(my_data)
install.packages("caret")
library(dplyr)
library(ggplot2)
library(caret)
weights <- c(house_area = 0.4, house-area = 0.4, garden_size = 0.3, balcony = 0.3, energy-eff = 0.2, bathrooms = 0.2)
weights <- c(house_area = 0.4, lot-area = 0.4, garden_size = 0.3, balcony = 0.3, energy-eff = 0.2, bathrooms = 0.2)
weights <- c(house_area = 0.4, lot_area = 0.4, garden_size = 0.3, balcony = 0.3, energy_eff = 0.2, bathrooms = 0.2)
housing_data$weighted_sum <- rowSums(housing_data[, c("house_area", "garden_size", "balcony", "buildyear", "bathrooms")] * weights)
housing_data$weighted_sum <- rowSums(my_data[, c("house_area", "garden_size", "balcony", "buildyear", "bathrooms")] * weights)
my_data$weighted_sum <- rowSums(my_data[, c("house_area", "lot_area", "garden_size", "balcony", "energy_eff", "bathrooms")] * weights)
weights <- c(house.area = 0.4, lot.area = 0.4, garden.size = 0.3, balcony = 0.3, energy.eff = 0.2, bathrooms = 0.2)
my_data$weighted_sum <- rowSums(my_data[, c("house.area", "lot.area", "garden.size", "balcony", "energy.eff", "bathrooms")] * weights)
X <- my_data$weighted_sum
y <- my_data$taxvalue
model <- lm(taxvalue ~ weighted_sum, data = my_data)
predictions <- predict(model, newdata = data.frame(weighted_sum = X))
rmse <- sqrt(mean((my_data$taxvalue - predictions)^2))
cat("RMSE:", rmse)
ggplot(my_data, aes(x = "", y = weighted_sum)) +
geom_boxplot() +
labs(title = "Box Plot of Weighted Sum",
y = "Weighted Sum") +
theme_minimal()
ggplot(my_data, aes(x = weighted_sum, y = taxvalue)) +
geom_point() +
labs(title = "Scatter Plot of Weighted Sum vs. Tax Value",
x = "Weighted Sum",
y = "Tax Value") +
theme_minimal()
ggplot(my_data, aes(x = weighted_sum, y = taxvalue)) +
geom_point() +
labs(title = "Scatter Plot of Weighted Sum vs. Tax Value",
x = "Weighted Sum",
y = "Tax Value") +
theme_classic()
ggplot(my_data, aes(x = weighted_sum, y = taxvalue)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Scatter Plot of Weighted Sum vs. Tax Value",
x = "Weighted Sum",
y = "Tax Value") +
theme_minimal()
ggplot(my_data, aes(x = weighted_sum, y = taxvalue)) +
geom_point() +
geom_line(aes(y = predictions), color = "red") +
labs(title = "Tax Value Prediction based on Weighted Features",
x = "Weighted Sum",
y = "Tax Value") +
theme_minimal()
r_squared <- summary(model)$r.squared
cat("R-squared:", r_squared)
rmse <- sqrt(mse)
mse <- mean((y_test - y_pred)^2)
mse <- mean((y_test - y_pred)^2)
mse <- mean((y_test - y_pred)^2)
mse <- mean((my_data$taxvalue - predictions)^2)
mse <- mean((my_data$taxvalue - predictions)^2)
mse <- mean((my_data$taxvalue - predictions)^2)
mse <- mean((my_data$taxvalue - predictions)^2)
cat("Mean Squared Error:", mse)
rmse <- sqrt(mse)
cat("Root Mean Squared Error:", rmse)
r_squared <- summary(model)$r.squared
cat("R-squared:", r_squared)
set.seed(123)
trainIndex <- createDataPartition(my_data$monument, p = 0.75, list = FALSE)
trainData <- my_data[trainIndex, ]
testData <- my_data[-trainIndex, ]
model <- glm(monument ~ house.area + garden.size + buildyear + balcony + zipcode, data = trainData, family = "binomial")
predictions <- predict(model, newdata = testData, type = "response")
predicted_classes <- ifelse(predictions > 0.5, 1, 0)
confusion_matrix <- confusionMatrix(table(testData$monument, predicted_classes))
print(confusion_matrix)
plot_data <- data.frame(
monument = testData$monument,
predicted_prob = predictions
)
ggplot(plot_data, aes(x = predicted_prob, y = monument)) +
geom_point() +
geom_smooth(method = "glm", se = FALSE) +
labs(title = "Logistic Regression: Predicted vs. Actual Monument Status",
x = "Predicted Probability of Monument",
y = "Monument (0/1)") +
theme_minimal()
ggplot(plot_data, aes(x = predicted_prob, y = monument)) +
geom_point() +
geom_smooth(method = "glm", se = FALSE) +
geom_vline(xintercept = thresholds, linetype = "dashed", color = "gray") +
geom_text(aes(x = thresholds, y = 0.5, label = paste0("P =", thresholds)), vjust = -1) +
labs(title = "Logistic Regression: Predicted vs. Actual Monument Status",
x = "Predicted Probability of Monument",
y = "Monument (0/1)") +
theme_minimal()
thresholds <- seq(0.1, 0.9, by = 0.1)
ggplot(plot_data, aes(x = predicted_prob, y = monument)) +
geom_point() +
geom_smooth(method = "glm", se = FALSE) +
geom_vline(xintercept = thresholds, linetype = "dashed", color = "gray") +
geom_text(aes(x = thresholds, y = 0.5, label = paste0("P =", thresholds)), vjust = -1) +
labs(title = "Logistic Regression: Predicted vs. Actual Monument Status",
x = "Predicted Probability of Monument",
y = "Monument (0/1)") +
theme_minimal()
ggplot(plot_data, aes(x = predicted_prob, y = monument)) +
geom_point() +
geom_smooth(method = "glm", se = FALSE) +
geom_vline(xintercept = thresholds, linetype = "dashed", color = "gray") +
geom_text(aes(x = rep(thresholds, each = nrow(plot_data)), y = 0.5, label = paste0("P =", thresholds)), vjust = -1) +
labs(title = "Logistic Regression: Predicted vs. Actual Monument Status",
x = "Predicted Probability of Monument",
y = "Monument (0/1)") +
theme_minimal()
cm_values <- confusion_matrix$table
# Create a data frame for plotting
cm_data <- data.frame(
Actual = factor(rownames(cm_values), levels = c("0", "1")),
Predicted = factor(colnames(cm_values), levels = c("0", "1")),
Count = as.vector(cm_values)
)
# Create the confusion matrix plot
ggplot(cm_data, aes(x = Predicted, y = Actual, fill = Count)) +
geom_tile() +
geom_text(aes(label = Count), vjust = 1, hjust = 1) +
scale_fill_gradient(low = "white", high = "darkblue") +
labs(title = "Confusion Matrix", x = "Predicted", y = "Actual") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
metrics <- confusionMatrix(confusion_matrix$table)
print(metrics)
cat("Precision:", metrics$overall["Precision"], "\n")
cat("F1 Score:", metrics$overall["F1"], "\n")
print(metrics$overall)
